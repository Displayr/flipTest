install.packages("StanHeaders")
install.packages("rstan")
install.packages("Rcpp")
library(flipDevTools)
UpdateDisplayrPkgs()
UpdateDisplayrPkgs(dependencies = TRUE)
install.packages("RcppEigen")
devtools::use_testthat()
library(flipTest)
library(flipTest)
#' Run Some Stan Code
#'
#' Fits a Bayesian model using stan.
#' @export
#' @useDynLib flipTest, .registration = TRUE
#' @import Rcpp methods
#' @importFrom rstan sampling
RunStan <- function()
{
n_right_leaners <- c(1500, 1500)
n_respondents <- c(10658, 10639)
data_list <- list(groups = 2,
trials = n_respondents,
successes = n_right_leaners)
# Compiling and producing posterior samples from the model.
options(width = 2000, digits = 15)
## stan(model_code = model_string, chains = 8, iter = 200,  data = data_list)
sampling(stanmodels$binomialproportions, chains = 8, iter = 200, data = data_list)
}
RunStan()
library(flipTest)
RunStan()
rm(list = ls())
RunStan()
RunStan()
library(flipTest)
RunStan()
library(flipTest)
RunStan()
RunStan()
library(flipTest)
RunStan()
library(flipTest)
RunStan()
library(flipTest)
RunStan()
n_right_leaners <- c(5000, 500, 50)
rm(list = ls())
library(flipTest)
RunStan()
library(flipTest)
RunStan()
library(flipTest)
RunStan()
library(flipTest)
RunStan()
library(flipTest)
RunStan()
library(flipTest)
library(flipTest)
RunStan()
RunStan()
RunStan()
RunStan()
RunStan()
RunStan()
RunStan()
RunStan()
RunStan()
RunStan()
RunStan()
RunStan()
RunStan()
library(flipTest)
RunStan()
RunStan()
RunStan()
R CMD INSTALL --preclean flipTest
CMD INSTALL --preclean flipTest
library(flipTest)
BinomialProportions(x = successes, n = trials)
successes <- c(50000, 5000, 500, 50)[1:4]
trials <- c(100000, 10000, 1000, 100)[1:4]
options(width = 2000, digits = 15)
BinomialProportions(x = successes, n = trials)
binom.test(c(10, 20), c(30,30))
successes = c(10, 20)
trials = c(30,30)
BinomialProportions(x = successes, n = trials)
binom.test(successes, trials)
successes = c(10, 10)
trials = c(30,30)
BinomialProportions(x = successes, n = trials)
binom.test(successes, trials)
successes = c(10, 12)
trials = c(30,30)
BinomialProportions(x = successes, n = trials)
binom.test(successes, trials)
successes = c(10, 15)
trials = c(30,30)
BinomialProportions(x = successes, n = trials)
binom.test(successes, trials)
successes = c(0, 5)
trials = c(5,5)
BinomialProportions(x = successes, n = trials)
binom.test(successes, trials)
summary(BinomialProportions(x = successes, n = trials))
str(BinomialProportions(x = successes, n = trials))
names(BinomialProportions(x = successes, n = trials))
BinomialProportions(x = successes, n = trials)$preferred
BinomialProportions(x = successes, n = trials)$preferred[2]
BinomialProportions(x = successes, n = trials)@preferred[2]
attr(BinomialProportions(x = successes, n = trials), "preferred[2]"
)
as.data.frame(BinomialProportions(x = successes, n = trials)
)
names(as.data.frame(BinomialProportions(x = successes, n = trials)))
BinomialProportions(x = successes, n = trials)[["preferred[1]"]
)
BinomialProportions(x = successes, n = trials)[["preferred[1]"]
BinomialProportions(x = successes, n = trials)[["preferred[1]"]]
as.data.frame(BinomialProportions(x = successes, n = trials))[["preferred[1]"]]
mean(as.data.frame(BinomialProportions(x = successes, n = trials))[["preferred[1]"]])
table(as.data.frame(BinomialProportions(x = successes, n = trials))[["preferred[1]"]])
library(flipTest)
successes = c(0, 5)
trials = c(5,5)
BinomialProportions(x = successes, n = trials)
BinomialProportions(x = successes, n = trials)
library(flipTest)
BinomialProportions(x = successes, n = trials)
?sampling
devtools::load_all(".")
BinomialProportions(x = successes, n = trials)
library(flipTest)
BinomialProportions(x = successes, n = trials)
library(flipTest)
BinomialProportions(x = successes, n = trials)
BinomialProportions(x = successes, n = trials)
library(flipTest)
stanfit = sampling(
stanmodels$binomialproportions,
chains = 8,
iter = 1000,
data = list(
groups = k,
trials = n,
successes = x))
z = BinomialProportions(x = successes, n = trials)
class(z)
extract(z)
stan::extract(z)
rstan::extract(z)
rstan::as.data.frame(z)
zz = rstan::extract(z)
sapply(zz, mean)
names(zz)
names(zz["preferred"])
names(zz[["preferred"]])
str(zz[["preferred"]])
zz[["preferred"]]
apply(zz[["preferred"]], 2)
colMeans(zz[["preferred"]], 2)
library(flipTest)
library(flipTest)
successes = c(0, 5)
trials = c(5,5)
BinomialProportions(x = successes, n = trials)
successes <- c(50000, 5000, 500, 50)[1:4]
trials <- c(100000, 10000, 1000, 100)[1:4]
BinomialProportions(x = successes, n = trials)
library(flipTest)
BinomialProportions(x = successes, n = trials)
library(flipTest)
BinomialProportions(x = successes, n = trials)
chisq.test(5:7)
MultinomialProportions(5:7)
MultinomialProportions(5:7)
library(flipTest)
MultinomialProportions(5:7)
library(flipTest)
MultinomialProportions(5:7)
MultinomialProportions(5:7)
MultinomialProportions(c(50, 70))
prop.test(c(50, 70))
?prop.test
chisq.test(c(50,70))
chisq.test(c(50,70))$p
chisq.test(c(50,70))$p.value
MultinomialProportions(c(50, 70))
chisq.test(c(50,70))$p.value
MultinomialProportions(c(50, 80))
chisq.test(c(50,70))$p.value
chisq.test(c(50,80))$p.value
MultinomialProportions(c(50, 72))
chisq.test(c(50,72))$p.value
MultinomialProportions(c(50, 71))
chisq.test(c(50,71))$p.value
MultinomialProportions(c(50, 72))
chisq.test(c(50,72))$p.value
